// src/lib/validations/course.schemas.ts
import { z } from 'zod';

// ==========================================
// üìù LISTA DE CATEGOR√çAS V√ÅLIDAS (del proyecto)
// ==========================================

const categoriasValidas = [
    'C√°lculo',
    '√Ålgebra',
    'Estad√≠stica',
    'Geometr√≠a',
    'An√°lisis',
    'Matem√°tica Aplicada',
    'Otros'
] as const;

// ==========================================
// üìù ESQUEMA BASE DE CURSO
// ==========================================

export const cursoBaseSchema = z.object({
    nombre: z
        .string()
        .min(3, 'El nombre debe tener al menos 3 caracteres')
        .max(100, 'El nombre no puede exceder 100 caracteres')
        .trim(),

    sigla: z
        .string()
        .min(2, 'La sigla debe tener al menos 2 caracteres')
        .max(20, 'La sigla no puede exceder 20 caracteres')
        .regex(/^[A-Z0-9-]+$/, 'La sigla solo puede contener letras may√∫sculas, n√∫meros y guiones')
        .trim(),

    descripcion: z
        .string()
        .min(20, 'La descripci√≥n debe tener al menos 20 caracteres')
        .max(1000, 'La descripci√≥n no puede exceder 1000 caracteres')
        .trim(),

    categoria: z.enum(categoriasValidas),

    creditos: z
        .number()
        .int('Los cr√©ditos deben ser un n√∫mero entero')
        .min(1, 'Debe tener al menos 1 cr√©dito')
        .max(20, 'No puede exceder 20 cr√©ditos'),

    semestre: z
        .number()
        .int('El semestre debe ser un n√∫mero entero')
        .min(1, 'El semestre debe ser entre 1 y 2')
        .max(2, 'El semestre debe ser entre 1 y 2'),

    a√±o: z
        .number()
        .int('El a√±o debe ser un n√∫mero entero')
        .min(2020, 'El a√±o debe ser posterior a 2020')
        .max(2100, 'El a√±o no puede ser posterior a 2100'),

    activo: z.boolean(),

    publico: z.boolean(),

    color: z
        .string()
        .regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'Debe ser un color hexadecimal v√°lido')
        .default('#003f7f'),

    icono: z.string().default(''),

    imagenPortada: z.string().default(''),
});

// ==========================================
// ‚úèÔ∏è ESQUEMA PARA CREAR CURSO
// ==========================================

export const crearCursoSchema = cursoBaseSchema.extend({
    prerequisitos: z
        .array(z.string().regex(/^[0-9a-fA-F]{24}$/, 'ID de curso prerequisito inv√°lido'))
        .default([]),

    profesores: z
        .array(z.string().regex(/^[0-9a-fA-F]{24}$/, 'ID de profesor inv√°lido'))
        .default([]),
});

// ==========================================
// üîÑ ESQUEMA PARA ACTUALIZAR CURSO
// ==========================================

export const actualizarCursoSchema = cursoBaseSchema.partial().extend({
    cid: z.string().regex(/^[0-9a-fA-F]{24}$/, 'ID de curso inv√°lido'),
});

// ==========================================
// üóëÔ∏è ESQUEMA PARA ELIMINAR CURSO
// ==========================================

export const eliminarCursoSchema = z.object({
    cid: z.string().regex(/^[0-9a-fA-F]{24}$/, 'ID de curso inv√°lido'),
    confirmarEliminacion: z.boolean().refine((val) => val === true, {
        message: 'Debe confirmar la eliminaci√≥n',
    }),
});

// ==========================================
// üîç ESQUEMA PARA FILTROS DE B√öSQUEDA
// ==========================================

export const cursoBusquedaSchema = z.object({
    busqueda: z.string().optional(),
    categoria: z.enum(categoriasValidas).optional(),
    semestre: z.number().int().min(1).max(2).optional(),
    a√±o: z.number().int().min(2020).optional(),
    activo: z.boolean().optional(),
    publico: z.boolean().optional(),
    ordenarPor: z.enum(['nombre', 'sigla', 'fecha', 'estudiantes']).default('nombre'),
    ordenDireccion: z.enum(['asc', 'desc']).default('asc'),
    pagina: z.number().int().min(1).default(1),
    limite: z.number().int().min(1).max(100).default(20),
});

// ==========================================
// üìä ESQUEMA PARA MATRICULAR ESTUDIANTE
// ==========================================

export const matricularEstudianteSchema = z.object({
    cursoId: z.string().regex(/^[0-9a-fA-F]{24}$/, 'ID de curso inv√°lido'),
    estudianteId: z.string().regex(/^[0-9a-fA-F]{24}$/, 'ID de estudiante inv√°lido'),
    notificarEstudiante: z.boolean().default(true),
});

// ==========================================
// üéØ TIPOS INFERIDOS DESDE LOS ESQUEMAS
// ==========================================

export type CrearCursoInput = z.infer<typeof crearCursoSchema>;
export type ActualizarCursoInput = z.infer<typeof actualizarCursoSchema>;
export type EliminarCursoInput = z.infer<typeof eliminarCursoSchema>;
export type CursoBusquedaInput = z.infer<typeof cursoBusquedaSchema>;
export type MatricularEstudianteInput = z.infer<typeof matricularEstudianteSchema>;

// ==========================================
// üé® VALIDADORES PERSONALIZADOS
// ==========================================

// Validar que el a√±o/semestre sea futuro o actual
export const validarSemestreActual = (a√±o: number, semestre: number): boolean => {
    const fechaActual = new Date();
    const a√±oActual = fechaActual.getFullYear();
    const mesActual = fechaActual.getMonth() + 1;
    const semestreActual = mesActual <= 6 ? 1 : 2;

    if (a√±o < a√±oActual) return false;
    if (a√±o === a√±oActual && semestre < semestreActual) return false;

    return true;
};

// Validar formato de sigla UC (ejemplo: MAT1610)
export const validarSiglaUC = (sigla: string): boolean => {
    const regex = /^[A-Z]{3}\d{4}$/;
    return regex.test(sigla);
};

// Sanitizar entrada de texto
export const sanitizarTexto = (texto: string): string => {
    return texto
        .trim()
        .replace(/\s+/g, ' ')
        .replace(/[<>]/g, '');
};

// Exportar categor√≠as para uso en componentes
export const CATEGORIAS_CURSO = categoriasValidas;